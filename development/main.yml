- hosts: localhost
  become: no

  collections:
    - community.general

  vars:
    username: "{{ ansible_user_id }}"

  tasks:
    - name: Echo init message
      debug:
        msg: Playing main.yml as user {{ username }}

    - name: Import Microsoft GPG key
      become: yes
      ansible.builtin.rpm_key:
        state: present
        key: https://packages.microsoft.com/keys/microsoft.asc
      ignore_errors: true

    - name: Add OpenSUSE Shells repository
      become: yes
      community.general.zypper_repository:
        name: "Shells for Linux (openSUSE_Leap_15.2)"
        repo: "https://download.opensuse.org/repositories/shells/openSUSE_Leap_15.2/"
        state: present
        auto_import_keys: yes

    - name: Add OpenSUSE Text Editors repository
      become: yes
      community.general.zypper_repository:
        name: "Text editors and hex editors for Linux (openSUSE_Leap_15.2)"
        repo: "https://download.opensuse.org/repositories/editors/openSUSE_Leap_15.2/"
        state: present
        auto_import_keys: yes

    - name: Add Microsoft dotnet repository to zypper
      become: yes
      community.general.zypper_repository:
        repo: "https://packages.microsoft.com/config/opensuse/15/prod.repo"
        state: present
        auto_import_keys: yes
        overwrite_multiple: yes
      ignore_errors: yes

    - name: Add Microsoft VSCode repository to zypper
      become: yes
      community.general.zypper_repository:
        name: "Visual Studio Code"
        repo: "https://packages.microsoft.com/yumrepos/vscode"
        state: present
        auto_import_keys: yes

    - name: Refresh all repos
      become: yes
      community.general.zypper_repository:
        repo: "*"
        runrefresh: yes

    - name: Install essential system tools and services
      become: yes
      zypper:
        name:
          - systemd-zram-service
          - earlyoom
        state: present

    - name: Install essential development tools
      become: yes
      zypper:
        name:
          - git
          - docker
          - python3-docker-compose
        state: present

    - name: Add current user to docker group
      become: yes
      user:
        name: "{{ username }}"
        groups: docker
        append: yes

    - name: Enable docker service
      become: yes
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Install C/C++ development tools
      become: yes
      zypper:
        name:
          - devel_basis
          - devel_C_C++
        type: pattern
        state: present

    - name: Install Java, .NET.. SDKs
      become: yes
      zypper:
        name:
          - java-11-openjdk
          - dotnet-sdk-5.0
        state: present

    - name: Install IDEs
      become: yes
      zypper:
        name:
          - code
          - emacs
        state: present

    - name: Install fish shell
      become: yes
      zypper:
        name: fish
        state: present

    - name: Change default shell to fish
      become: yes
      user:
        name: "{{ username }}"
        shell: /usr/bin/fish

    - name: Download & install oh-my-fish
      block:
        - name: Download oh-my-fish
          get_url:
            url: https://get.oh-my.fish
            dest: ~/oh-my.fish
            validate_certs: no

        - name: Install oh-my-fish
          command: fish ~/oh-my.fish --yes --noninteractive

        - name: Install fenv for fish
          shell: omf install foreign-env
          args:
            executable: /usr/bin/fish

    - name: Download & install Nix package manager
      block:
        - name: Download Nix
          get_url:
            url: https://nixos.org/nix/install
            dest: ~/nix-install.sh
        - name: Install Nix
          command: sh ~/nix-install.sh

    - name: Install Powerline status plugin for terminal
      pip:
        name: powerline-status
        executable: pip3
        extra_args: --user

    - name: Configure fish
      copy:
        dest: ~/.config/fish/config.fish
        content: |
          # PATH
          set -gx PATH "$HOME/.local/bin/" $PATH
          set -gx PATH "$HOME/.dotnet/tools/" $PATH

          # Powerline Status
          powerline-daemon -q
          set fish_function_path $fish_function_path "$HOME/.local/lib/python3.6/site-packages/powerline/bindings/fish"
          powerline-setup

          set DOTNET_CLI_TELEMETRY_OPTOUT 1

          # Nix
          if test -e $HOME/.nix-profile/etc/profile.d/nix.sh
            fenv source $HOME/.nix-profile/etc/profile.d/nix.sh
          end
          # End Nix

          echo "Hello there!"

    - name: Download & install Fira Code fonts
      block:
        - name: Download Fira Code fonts
          get_url:
            url: https://github.com/tonsky/FiraCode/releases/download/5.2/Fira_Code_v5.2.zip
            dest: ~/Downloads/firacode_fonts.zip
        - name: Create directory for FiraCode
          file:
            path: ~/.fonts/FiraCode
            state: directory
        - name: Install FiraCode into ~/.fonts
          unarchive:
            src: ~/Downloads/firacode_fonts.zip
            dest: ~/.fonts/FiraCode/

    - name: Download & install Hasklig fonts
      block:
        - name: Download Haskling fonts
          get_url:
            url: https://github.com/i-tu/Hasklig/releases/download/v1.2/Hasklig-1.2.zip
            dest: ~/Downloads/hasklig_fonts.zip
        - name: Create directory for Hasklig
          file:
            path: ~/.fonts/Hasklig
            state: directory
        - name: Extract Hasklig into ~/.fonts
          unarchive:
            src: ~/Downloads/hasklig_fonts.zip
            dest: ~/.fonts/Hasklig/

    - name: Enabling ZRAM Swap
      become: yes
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      with_items:
        - zramswap.service
        - earlyoom

    - name: Disable unnecessary systemd services
      become: yes
      systemd:
        name: "{{ item }}"
        enabled: no
        state: stopped
      with_items:
        - packagekit
        - check-battery.service
        - upower.service
        - avahi-daemon.service
        - ModemManager.service
